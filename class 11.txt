Advantage of Encapsulation in java:
------------------------------------
By providing only setter or getter method, you can make the class read-only or write-only.
It provides you the control over the data. Suppose you want to set the value of id i.e. greater than 100 only, you can write the logic inside the setter method.

Simple example of encapsulation in java
Let's see the simple example of encapsulation that has only one field with its setter and getter methods.

1.//save as Student.java  
2.package com.digitallync  
3.public class Student{  
4.private String name;  
5.   
6.public String getName(){  
7.return name;  
8.}  
9.public void setName(String name){  
10.this.name=name  
11.}  
12.}  

1.//save as Test.java  
2 import digitallync.* 
3.class Test{  
4.public static void main(String[] args){  
5.Student s=new Student();  
6.s.setName("vijay");  
7.System.out.println(s.getName());  
8.}  
}



access modifiers ::
-----------------
There are 4 types of java access modifiers:
1.private
2.default
3.protected
4.public


1) private access modifier
The private access modifier is accessible only within class.

1.class A{  
2.private int data=40;  
3.private void msg(){System.out.println("Hello java");}  
4.}  
5.  
6.public class Simple{  
7. public static void main(String args[]){  
8.   A obj=new A();  
9.   System.out.println(obj.data);//Compile Time Error  
10.   obj.msg();//Compile Time Error  
11.   }  
12.} 

Role of Private Constructor
If you make any class constructor private, you cannot create the instance of that class from outside the class. For example:

1.class A{  
2.private A(){}//private constructor  
3.void msg(){System.out.println("Hello java");}  
4.}  
5.public class Simple{  
6. public static void main(String args[]){  
7.   A obj=new A();//Compile Time Error  
8. }  
9.}  


2) default access modifier
If you don't use any modifier, it is treated as default bydefault. The default modifier is accessible only within package.



In this example, we have created two packages pack and mypack. We are accessing the A class from outside its package, since A class is not public, so it cannot be accessed from outside the package.

1.//save by A.java  
2.package pack;  
3.class A{  
4.  void msg(){System.out.println("Hello");}  
5.}  

1.//save by B.java  
2.package mypack;  
3.import pack.*;  
4.class B{  
5.  public static void main(String args[]){  
6.   A obj = new A();//Compile Time Error  
7.   obj.msg();//Compile Time Error  
8.  }  
9.} 

In the above example, the scope of class A and its method msg() is default so it cannot be accessed from outside the package.


3) protected access modifier
The protected access modifier can be applied on the data member, method and constructor. It The protected access modifier is accessible within package and outside the package but through inheritance only.
 
In this example, we have created the two packages pack and mypack. The A class of pack package is public, so can be accessed from outside the package. But msg method of this package is declared as protected, so it can be accessed from outside the class only through inheritance.

1.//save by A.java  
2.package pack;  
3.public class A{  
4.protected void msg(){System.out.println("Hello");}  
5.}  

1.//save by B.java  
2.package mypack;  
3.import pack.*;  
4.  
5.class B extends A{  
6.  public static void main(String args[]){  
7.   B obj = new B();  
8.   obj.msg();  
9.  }  
10.}  
Output:Hello


4) public access modifier
The public access modifier is accessible everywhere. It has the widest scope among all other modifiers.
Example of public access modifier

1.//save by A.java  
2.  
3.package pack;  
4.public class A{  
5.public void msg(){System.out.println("Hello");}  
6.}  

1.//save by B.java  
2.  
3.package mypack;  
4.import pack.*;  
5.  
6.class B{  
7.  public static void main(String args[]){  
8.   A obj = new A();  
9.   obj.msg();  
10.  }  
11.}  
Output:Hello


 

